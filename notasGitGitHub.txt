¿Cómo poner el nombre de usuario y correo en Git?
git config --global user.email "tu@email.com"
git config --global user.name "tu nombre"

¿Cómo comenzar a seguir una carpeta con Git?
git init

¿Cómo ver el estado actual de la rama master?
git status

¿Cómo trackear o seguir un archivo con git?
git add <filename>

¿Cómo dejar de trackear o seguir un archivo en git?
git rm --cached <filename>

¿Cómo borrar definitivamente un archivo que esta en staging sin perder su historial de versiones?
git rm --force <filename>

(Para más información ver imagen: Ciclo de vida o estados de los archivos)

¿Cómo enviar los cambios de un archivo al repositorio?
git commit -m "Mensaje de actualización"

¿Cómo ver todas las versiones o historia de un archivo?
git log <filename>

¿Cómo ver todas los cambios entre la versión actual y la anterior de un archivo?
git show <filename>

¿Cómo ver las diferencias o cambios entre dos versiones exactas de un archivo?
git diff tagMenosReciente tagMásReciente

¿Cómo volver a una versión en específico borrando todo el historial posterior a la versión seleccionada?
git reset <tagCommitVersion> --soft (Borra todo de Git pero el archivo actual en el disco duro queda intacto)
git reset <tagCommitVersion> --hard (Borra todo de Git y también del disco duro)

¿Cómo revisar una x versión sin borrar de Git la actual?
git checkout <tagCommitVersion> <fileName>

¿Después de revisar dicha versión, si no quiero agregar cambios ni nada, solo quiero volver a la versión maestra actual, cómo lo hago?
git checkout master <filename>

Pero si sí quisiera guardar cambios, descartando y borrando la versión master ¿Cómo lo hago?
Después del checkout se hace add y después commit

---------------------------------------------------------------------------------

	COMANDOS PARA TRABAJO REMOTO CON GIT:

git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.

git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.

git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).

git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.

git pull: Básicamente, git fetch y git merge al mismo tiempo.

	COMANDOS ADICIONALES:

git log --oneline:Te muestra el id commit y el título del commit.

git log --decorate: Te muestra donde se encuentra el head point en el log.

git log --stat: Explica el número de líneas que se cambiaron brevemente.

git log -p: Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.

git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.

git log --graph --oneline --decorate y

git log --pretty=format:"%cn hizo un commit %h el dia %cd": Muestra mensajes personalizados de los commits.

git log -3: Limitamos el número de commits.

git log --after=“2018-1-2”

git log --after=“today” y

git log --after=“2018-1-2” --before=“today”: Commits para localizar por fechas.

git log --author=“Name Author”: Commits hechos por autor que cumplan exactamente con el nombre.

git log --grep=“INVIE”: Busca los commits que cumplan tal cual está escrito entre las comillas.

git log --grep=“INVIE” –i: Busca los commits que cumplan sin importar mayúsculas o minúsculas.

git log – index.html: Busca los commits en un archivo en específico.

git log -S “Por contenido”: Buscar los commits con el contenido dentro del archivo.

git log > log.txt: guardar los logs en un archivo txt

	COMO FUNCIONAN LAS RAMAS EN GIT

git branch -nombre de la rama-: Con este comando se genera una nueva rama.

git checkout -nombre de la rama-: Con este comando puedes saltar de una rama a otra.

git checkout -b rama: Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git brach y git checkout al mismo tiempo.

git reset id-commit: Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado.

git checkout rama-o-id-commit: Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.

